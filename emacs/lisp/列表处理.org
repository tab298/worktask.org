第一章 列表处理
* 1.1表列介绍
** 1.1 lisp列表
*** 列表允许嵌套 '(this list has (a list inside of it))
** 1.1.1 lisp 原子
*** 在一个列表中，原子是由空格一一分隔的。原子可以紧接括号。
*** 列表3种组成：
  - 括号和括号中的由空格分隔的原子。
  - 括号和括号中的其他列表。
  - 括号和括号中的其他列表及原子。
*** 特殊：空列表 {} ，可以是原子也可以是列表.
*** s-表达式（s-expression）:原子和列表的书面表达.
*** 双引号文本：单个原子--->在lisp中，所有用双引号括起来的文本，包括标点符号和空格，都是单个原子。（串）
** 1.1.2-列表中的空格
*** 至少一个空格分隔开原子
* 1.2 运行一个程序
** 运行：求值-->>>计算机完成3件事情
   - 只返回列表本身
   - 出错消息
   - 执行命令
** 单引号 " ' " 
   引用，单引号位于一个列表前，它告诉lisp不要对这个列表做任何操作，仅仅是按其原样。
   '(this is a quoted list)
   但是一个列表前没有引号，列表中第一个符号就很特别了：它是一条计算机要执行的命令（函数）
   (+ 2 2) C-x C-e ;可以对这个表达式进行求值。回显区里面会出现要求值的内容。
   (* (* 6100 12) (* 20))


     
      



** 产生错误信息
     错误信息可以理解为异国他乡的路标，不理解前很去寻找你的目的地。但是一旦你理解了，它们就是指路灯了。一个事物都是有两面性，即可以是好的也可以是坏的。
     (this is an unquoted list)--> Symbol's function definition is void :this
** 理解Symbol's function definition is void 
   可以稍微体会到emacs lisp的实现：当一个符号没有一个对应的函数定义时，应当包括指令的位置就是一个“空的”(void)




** 符号名和函数定义
    符号或许是临时用于定义函数或者一组指令的。符号一次只能有一个函数定义以其连接。
* 1.5 lisp解析器
  lisp解析器的工作方式
- 查看前面是否有单引号，如果有，就直接给出这个列表。
- 如果没，就查看第一个原子是否是函数定义,如果是，就执行函数定义的指令，否则打印一个错误信息。

** 复杂情况之一：
   在没有列表的情况下（这个符号前没有单引号，也没有括号），lisp解析器将试图象变量一样来确定这个符号的值。
   
** 复杂情况之二
 一些特殊函数（特殊表），以异常的方式运行。

** 复杂情况之三 
  列表不是特殊表，但是列表之间有嵌套，那么lisp解析器会最先处理最内层的列表，然后逐一往外解释。
** 字节编译
   byte-compile-file 把el文件转换为字节编译代码，存储在.elc文件里面.通常字节编译代码会运行的更快。

* 1.6 求值
 完成表达式的求值后（s-expression） ，lisp解析器几乎总返回一个值（指令结果或者错误消息）。
除非lisp进入无穷循环才不会返回。
** 附带效果：
   lisp解析器在返回一个值的同时，它也可以做些其他的事情，比如移动光标，或者copy文件。

** 对一个内部列表求值
   





